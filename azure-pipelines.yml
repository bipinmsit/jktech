trigger:
  branches:
    include:
      - dev
      - uat
      - prod

variables:
  dockerImageName: "fastapi-app"
  dockerRegistryServiceConnection: "<your-docker-service-connection>"
  containerRegistry: "<your-container-registry>.azurecr.io"
  appServiceNameDev: "<your-dev-app-service-name>"
  appServiceNameUAT: "<your-uat-app-service-name>"
  appServiceNameStaging: "<your-staging-app-service-name>"
  appServiceNameProd: "<your-prod-app-service-name>"

# First stage is for testing the application, if passed then only go for build
stages:
  - stage: Test
    displayName: Run Tests
    jobs:
      - job: RunTests
        displayName: Run Unit Tests
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: "3.x"
              addToPath: true

          - script: |
              python -m pip install --upgrade pip
              pip install -r requirements.txt
              pip install -r test_requirements.txt
              pytest
            displayName: "Run Unit Tests"

  - stage: Build
    displayName: Build and Push Docker Image
    dependsOn: Test
    jobs:
      - job: Build
        displayName: Build Docker Image
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: "3.x"
              addToPath: true

          - task: Docker@2
            displayName: Build and Push Docker Image
            inputs:
              command: buildAndPush
              repository: $(dockerImageName)
              dockerfile: Dockerfile
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                $(Build.BuildId)

  - stage: DeployDev
    displayName: Deploy to Development Environment
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'dev'))
    jobs:
      - deployment: DeployJobDev
        displayName: Deploy to Development
        environment: "Development"
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebAppContainer@1
                  displayName: Deploy to Development App Service
                  inputs:
                    azureSubscription: "<your-azure-service-connection>"
                    appName: $(appServiceNameDev)
                    containers: |
                      $(containerRegistry)/$(dockerImageName):$(Build.BuildId)

  - stage: DeployUAT
    displayName: Deploy to UAT Environment
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'uat'))
    jobs:
      - deployment: DeployJobUAT
        displayName: Deploy to UAT
        environment: "UAT"
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebAppContainer@1
                  displayName: Deploy to UAT App Service
                  inputs:
                    azureSubscription: "<your-azure-service-connection>"
                    appName: $(appServiceNameUAT)
                    containers: |
                      $(containerRegistry)/$(dockerImageName):$(Build.BuildId)

  - stage: DeployStaging
    displayName: Deploy to Staging Production Environment
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'prod'))
    jobs:
      - deployment: DeployJobStaging
        displayName: Deploy to Staging Production
        environment: "Staging"
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebAppContainer@1
                  displayName: Deploy to Staging App Service
                  inputs:
                    azureSubscription: "<your-azure-service-connection>"
                    appName: $(appServiceNameStaging)
                    containers: |
                      $(containerRegistry)/$(dockerImageName):$(Build.BuildId)

  - stage: DeployProd
    displayName: Deploy to Production Environment
    dependsOn: DeployStaging
    condition: succeeded()
    jobs:
      - deployment: DeployJobProd
        displayName: Deploy to Production
        environment: "Production"
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebAppContainer@1
                  displayName: Deploy to Production App Service
                  inputs:
                    azureSubscription: "<your-azure-service-connection>"
                    appName: $(appServiceNameProd)
                    containers: |
                      $(containerRegistry)/$(dockerImageName):$(Build.BuildId)
